[project]
name = "ValeraLib"
version = "1.4.1"
description = "The library goes brrrrrr"
keywords = ["The greatest package to ever exist"]
readme = "README.md"
authors = [
    {name = "Valera", email = "v79166789533@gmail.com"},
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.6",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
]
requires-python = ">=3.6"
dependencies = [
    "numpy>=1.24.3,<2.0.0",
    "pandas>=1.5.3,<2.0.0",
    "playsound>=1.2.2,<2.0.0",
    "plotly>=5.14.1,<6.0.0",
    "requests>=2.31.0,<3.0.0",
    "telebot",
]

[project.urls]
Homepage = "https://github.com/Valera6/ValeraLib"

[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"

[tool.ruff]
line-length = 210 # it's python, I don't care
indent-width = 2
src = ["src", "test"] # Allow imports relative to the "src" and "test" directories.
#not-in-test = false

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
quote-style = "double"
indent-style = "tab"
docstring-code-format = false
skip-magic-trailing-comma = false

[tool.ruff.lint]
ignore = [
	"E713",
	"F403",
]

#[tool.ruff.lint]
#ignore = [
#  # Line length regulated by formatter
#  "E501",
#  # pydocstyle: http://www.pydocstyle.org/en/stable/error_codes.html
#  "D401", # Relax NumPy docstring convention: First line should be in imperative mood
#  # flake8-pytest-style:
#  "PT011", # pytest.raises({exception}) is too broad, set the match parameter or use a more specific exception
#  # flake8-simplify
#  "SIM102", # Use a single `if` statement instead of nested `if` statements
#  "SIM108", # Use ternary operator
#  # ruff
#  "RUF005", # unpack-instead-of-concatenating-to-collection-literal
#  # pycodestyle
#  # TODO: Remove errors below to further improve docstring linting
#  # Ordered from most common to least common errors.
#  "D105", # Missing docstring in magic method
#  "D100", # Missing docstring in public module
#  "D104", # Missing docstring in public package
#  # flake8-todos
#  "TD002", # Missing author in TODO
#  "TD003", # Missing issue link on the line following this TODO
#  # tryceratops
#  "TRY003", # Avoid specifying long messages outside the exception class
#  # Lints below are turned off because of conflicts with the ruff formatter
#  "D206",
#  "W191",
#]
#
#
#
#[tool.ruff.lint.per-file-ignores]
#"tests/**/*.py" = ["D100", "D103", "B018", "FBT001"]
#
#[tool.ruff.lint.pydocstyle]
#convention = "numpy"
#

